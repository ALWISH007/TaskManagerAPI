using Microsoft.EntityFrameworkCore;
using TaskManagerAPI.Data;
using TaskManagerAPI.Models;

namespace TaskManagerAPI.Services;

public class TaskService : ITaskService
{
    /*
    
    // Our in-memory "database" (mimics Phase 1)
    private static readonly List<TaskItem> _tasks = new();
    private static int _nextId = 1;

    public TaskService()
    {
        // Seed with some initial data
        if (_tasks.Count == 0)
        {
            _tasks.Add(new TaskItem { Id = _nextId++, Title = "Learn C#", Description = "Complete Phase 1", IsCompleted = true });
            _tasks.Add(new TaskItem { Id = _nextId++, Title = "Learn HTML/CSS/JS", Description = "Complete Phase 2", IsCompleted = false });
        }
    }

    public Task<IEnumerable<TaskItem>> GetAllTasksAsync()
    {
        // Simulate an async operation, though it's in-memory
        return Task.FromResult(_tasks.AsEnumerable());
    }

    public Task<TaskItem?> GetTaskByIdAsync(int id)
    {
        var task = _tasks.FirstOrDefault(t => t.Id == id);
        return Task.FromResult(task);
    }

    public Task<TaskItem> AddTaskAsync(TaskItem taskItem)
    {
        taskItem.Id = _nextId++;
        _tasks.Add(taskItem);
        return Task.FromResult(taskItem);
    }

    public Task<TaskItem?> UpdateTaskAsync(int id, TaskItem updatedTask)
    {
        var existingTask = _tasks.FirstOrDefault(t => t.Id == id);
        if (existingTask == null)
        {
            return Task.FromResult((TaskItem?)null);
        }

        // Update the properties of the found task
        existingTask.Title = updatedTask.Title;
        existingTask.Description = updatedTask.Description;
        existingTask.IsCompleted = updatedTask.IsCompleted;

        return Task.FromResult((TaskItem?)existingTask);//The cast (TaskItem?) ensures the returned type matches the method signature.
    }

    public Task<bool> DeleteTaskAsync(int id)
    {
        var taskToRemove = _tasks.FirstOrDefault(t => t.Id == id);
        if (taskToRemove != null)
        {
            _tasks.Remove(taskToRemove);
            return Task.FromResult(true);
        }
        return Task.FromResult(false);
    }

    */

    // We inject the AppDbContext instead of using a static list
    private readonly AppDbContext _context;

    public TaskService(AppDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<TaskItem>> GetAllTasksAsync()
    {
        // Now we query the database asynchronously
        return await _context.TaskItems.ToListAsync();
    }

    public async Task<TaskItem?> GetTaskByIdAsync(int id)
    {
        // Find a task by its primary key asynchronously
        return await _context.TaskItems.FindAsync(id);
    }

    public async Task<TaskItem> AddTaskAsync(TaskItem taskItem)
    {
        // Add the new task to the DbContext
        _context.TaskItems.Add(taskItem);
        // Save the changes to the database
        await _context.SaveChangesAsync();
        return taskItem; // The taskItem now has an ID generated by the database
    }

    public async Task<TaskItem?> UpdateTaskAsync(int id, TaskItem updatedTask)
    {
        var existingTask = await _context.TaskItems.FindAsync(id);
        if (existingTask == null)
        {
            return null;
        }

        // Update the properties of the found task
        existingTask.Title = updatedTask.Title;
        existingTask.Description = updatedTask.Description;
        existingTask.IsCompleted = updatedTask.IsCompleted;

        // Mark the entity as modified and save changes
        _context.TaskItems.Update(existingTask);
        await _context.SaveChangesAsync();

        return existingTask;
    }

    public async Task<bool> DeleteTaskAsync(int id)
    {
        var taskToRemove = await _context.TaskItems.FindAsync(id);
        if (taskToRemove != null)
        {
            _context.TaskItems.Remove(taskToRemove);
            await _context.SaveChangesAsync();
            return true;
        }
        return false;
    }
}